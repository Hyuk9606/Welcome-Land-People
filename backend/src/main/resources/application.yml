spring:
    config:
        activate:
            on-profile: dev
    # ??? ?? ??
    datasource:
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3306/boonmoja?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false&allowPublicKeyRetrieval=true
        username: root
        password: root
        hikari:
            pool-name: jpa-hikari-pool
            maximum-pool-size: 5
            jdbc-url: ${spring.datasource.url}
            username: ${spring.datasource.username}
            password: ${spring.datasource.password}
            driver-class-name: ${spring.datasource.driver-class-name}
            data-source-properties:
                rewriteBatchedStatements: true
    second-datasource:
        mongodb:
            authentication-database: admin
            username: root
            password: root
            database: boonmoja
            port: 27017
            host: localhost
        servlet:
            multipart:
                max-file-size: 5MB
                max-request-size: 5MB
                enabled: true

    # JPA ??
    jpa:
        generate-ddl: true
        hibernate:
            ddl-auto: update    # 운영하는 환경에서는 사용하면 안됨.
        show-sql: true
        properties:
            hibernate:
                dialect: org.hibernate.dialect.MySQL8Dialect
                hbm2ddl.import_files_sql_extractor: org.hibernate.tool.hbm2ddl.MultipleLinesSqlCommandExtractor
                current_session_context_class: org.springframework.orm.hibernate5.SpringSessionContext
                default_batch_fetch_size: ${chunkSize:100}
                jdbc.batch_size: 20
                order_inserts: true
                order_updates: true
#                format_sql: true
    # Security OAuth
    security:
        oauth2.client:
            registration:
                google:
                    clientId: '337083973910-nig02kc1vp287u3mppe8t6df021mkrrn.apps.googleusercontent.com'
                    clientSecret: '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'
                    scope:
                        - email
                        - profile
                naver:
                    clientId: 'ePk5lhL5Tjt6Uif1crgJ'
                    clientSecret: 'Ug9pC_MncG'
                    clientAuthenticationMethod: post
                    authorizationGrantType: authorization_code
                    redirectUri: "{baseUrl}/{action}/oauth2/code/{registrationId}"
                    scope:
                        - nickname
                        - email
                    clientName: Naver
                kakao:
                    clientId: 'ad9e48f30c01a6eb33c7af2adcb2a0a1'
                    clientSecret: 'oc3FvCFeulzJfepFU4jyxVh8a4WYKa5B'
                    clientAuthenticationMethod: post
                    authorizationGrantType: authorization_code
                    redirectUri: "{baseUrl}/{action}/oauth2/code/{registrationId}"
                    scope:
                        - profile_nickname
                        - account_email
                    clientName: Kakao
            # Provider ??
            provider:
                naver:
                    authorizationUri: https://nid.naver.com/oauth2.0/authorize
                    tokenUri: https://nid.naver.com/oauth2.0/token
                    userInfoUri: https://openapi.naver.com/v1/nid/me
                    userNameAttribute: response
                kakao:
                    authorizationUri: https://kauth.kakao.com/oauth/authorize
                    tokenUri: https://kauth.kakao.com/oauth/token
                    userInfoUri: https://kapi.kakao.com/v2/user/me
                    userNameAttribute: id

# cors ??
cors:
    allowed-origins: 'http://localhost:3000'
    allowed-methods: GET,POST,PUT,DELETE,OPTIONS
    allowed-headers: '*'
    max-age: 3600

# jwt secret key ??
jwt.secret: '8sknjlO3NPTBqo319DHLNqsQAfRJEdKsETOdsboonmoja'

# ?? ?? secret Key ? RedirectUri ??
app:
    auth:
        tokenSecret: 926D96C90030DD58429D2751AC1BDBBC
        tokenExpiry: 180000000
        refreshTokenExpiry: 604800000
    oauth2:
        authorizedRedirectUris:
            - http://localhost:3000/oauth/redirect
springdoc:
    version: '@project.version@'
    api-docs:
        path: /v3/api-docs
    default-consumes-media-type: application/json
    default-produces-media-type: application/json
    swagger-ui:
        operations-sorter: alpha
        tags-sorter: alpha
        path: /swagger-ui.html
        disable-swagger-default-url: true
        display-query-params-without-oauth2: true
        persistAuthorization: true
    paths-to-match:
        - /**
        - /test/**


---
spring:
    config:
        activate:
            on-profile: prod
    # ??? ?? ??
    datasource:
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://j6c207.p.ssafy.io:3306/boonmoja?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false&allowPublicKeyRetrieval=true
        username: ssafy
        password: 1234
        hikari:
            pool-name: jpa-hikari-pool
            maximum-pool-size: 5
            jdbc-url: ${spring.datasource.url}
            username: ${spring.datasource.username}
            password: ${spring.datasource.password}
            driver-class-name: ${spring.datasource.driver-class-name}
            data-source-properties:
                rewriteBatchedStatements: true

    second-datasource:
        mongodb:
            authentication-database: admin
            username: ssafy
            password: 1234
            database: boonmoja
            port: 27017
            host: j6c207.p.ssafy.io
        servlet:
            multipart:
                max-file-size: 5MB
                max-request-size: 5MB
                enabled: true
    # JPA ??
    jpa:
        generate-ddl: true
        hibernate:
            ddl-auto: update    # 운영하는 환경에서는 사용하면 안됨.
        show-sql: true
        properties:
            hibernate:
                dialect: org.hibernate.dialect.MySQL8Dialect
                hbm2ddl.import_files_sql_extractor: org.hibernate.tool.hbm2ddl.MultipleLinesSqlCommandExtractor
                current_session_context_class: org.springframework.orm.hibernate5.SpringSessionContext
                default_batch_fetch_size: ${chunkSize:100}
                jdbc.batch_size: 20
                order_inserts: true
                order_updates: true
    #                format_sql: true
    # Security OAuth
    security:
        oauth2.client:
            registration:
                google:
                    clientId: '337083973910-nig02kc1vp287u3mppe8t6df021mkrrn.apps.googleusercontent.com'
                    clientSecret: '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'
                    scope:
                        - email
                        - profile
                naver:
                    clientId: 'ePk5lhL5Tjt6Uif1crgJ'
                    clientSecret: 'Ug9pC_MncG'
                    clientAuthenticationMethod: post
                    authorizationGrantType: authorization_code
                    redirectUri: "{baseUrl}/{action}/oauth2/code/{registrationId}"
                    scope:
                        - nickname
                        - email
                    clientName: Naver
                kakao:
                    clientId: 'ad9e48f30c01a6eb33c7af2adcb2a0a1'
                    clientSecret: 'oc3FvCFeulzJfepFU4jyxVh8a4WYKa5B'
                    clientAuthenticationMethod: post
                    authorizationGrantType: authorization_code
                    redirectUri: "{baseUrl}/{action}/oauth2/code/{registrationId}"
                    scope:
                        - profile_nickname
                        - account_email
                    clientName: Kakao
            # Provider ??
            provider:
                naver:
                    authorizationUri: https://nid.naver.com/oauth2.0/authorize
                    tokenUri: https://nid.naver.com/oauth2.0/token
                    userInfoUri: https://openapi.naver.com/v1/nid/me
                    userNameAttribute: response
                kakao:
                    authorizationUri: https://kauth.kakao.com/oauth/authorize
                    tokenUri: https://kauth.kakao.com/oauth/token
                    userInfoUri: https://kapi.kakao.com/v2/user/me
                    userNameAttribute: id

# cors ??
cors:
    allowed-origins: 'http://j6c207.p.ssafy.io:3000'
    allowed-methods: GET,POST,PUT,DELETE,OPTIONS
    allowed-headers: '*'
    max-age: 3600

# jwt secret key ??
jwt.secret: '8sknjlO3NPTBqo319DHLNqsQAfRJEdKsETOdsboonmoja'

# ?? ?? secret Key ? RedirectUri ??
app:
    auth:
        tokenSecret: 926D96C90030DD58429D2751AC1BDBBC
        tokenExpiry: 180000000
        refreshTokenExpiry: 604800000
    oauth2:
        authorizedRedirectUris:
            - http://j6c207.p.ssafy.io:3000/oauth/redirect

springdoc:
    version: '@project.version@'
    api-docs:
        path: /v3/api-docs
    default-consumes-media-type: application/json
    default-produces-media-type: application/json
    swagger-ui:
        operations-sorter: alpha
        tags-sorter: alpha
        path: /swagger-ui.html
        disable-swagger-default-url: true
        display-query-params-without-oauth2: true
        persistAuthorization: true
    paths-to-match:
        - /**
        - /test/**